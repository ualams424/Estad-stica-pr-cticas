datos<-read.csv("https://github.com/ualams424/Estad-stica-pr-cticas/blob/main/datosB2.csv", sep = ";", dec= ",")
datos <- read.csv('datosB2.csv', sep= ";", dec= ",")
datos <- datos[!is.na(datos$TOTAL_SALA),]
datos
source("~/GitHub/Estad-stica-pr-cticas/Practica 2.R")
datos <- read.csv('datosB2.csv', sep= ";", dec= ",")
datos <- datos[!is.na(datos$TOTAL_SALA),]
datos
source("~/GitHub/Estad-stica-pr-cticas/Practica 2.R")
install.packages("e1071")
datos <- read.csv('datosB2.csv', sep= ";", dec= ",")
datos
datos["VNP"] = ifelse(datos$PISTAS=<2, "POSITIVA", "NEGATIVA")
datos["VNP"] = ifelse(datos$PISTAS<3, "POSITIVA", "NEGATIVA")
datos["VNP"]
source("~/GitHub/Estad-stica-pr-cticas/Practica 2.R")
library(e1071)
df = datos[,c("VP","VT","SA")]
df
Y = df[,"SA"]
X = df[,c("VP","VT")]
Y
m = naiveBayes(X,Y)
m
df = datos[,c("VH1","VMB","SA")]
df
Y = df[,"SA"]
X = df[,c("VH1","VMB")]
m = naiveBayes(X,Y)
pred = predict(m, df[,c("VH1","VMB")])
pred
df = datos[,c("VH1","VMB","SA")]
df
Y = df[,"SA"]
X = df[,c("VH1","VMB")]
m = naiveBayes(X,Y)
m
datos["VP"] = ifelse(datos$PUNTUACION>2500, "POSITIVA", "NEGATIVA")
datos["SA"] = ifelse(datos$SALA=="A", "POSITIVA", "NEGATIVA")
datos["VH1"] = ifelse(datos$HABITACION1<13, "POSITIVA", "NEGATIVA")
datos["VT"] = ifelse(datos$TOTAL_SALA<50,"POSITIVA", "NEGATIVA")
datos["VMB"] = ifelse(datos$MIEMBROS>5 & datos$MIEMBROS<3, "NEGATIVA", "POSITIVA")
datos["VNP"] = ifelse(datos$PISTAS<3, "POSITIVA", "NEGATIVA")
datos["LE"] = ifelse(datos$LIDERAZGO=="SI", "POSITIVA", "NEGATIVA")
datos["PE"] = ifelse(datos$PRUEBA_EXTRA=="SI", "`POSITIVA", "NEGATIVA" )
library(e1071)
df = datos[,c("VH1","VMB","SA")]
df
Y = df[,"SA"]
X = df[,c("VH1","VMB")]
m = naiveBayes(X,Y)
m
df = datos[,c("VH1","VMB","VP")]
df
#Variable final
Y = df[,"VP"]
#Variable que se utiliza para predecir
X = df[,c("VH1","VMB")]
m = naiveBayes(X,Y)
pred = predict(m, df[,c("VH1","VMB")])
pred
real=df$VP
nconjunta = table(pred, real)
nconjunta
nS = table(df$S)
nS
nconjunta["POSITIVA","POSITIVA"]/nS["POSITIVA"]
nconjunta = table(pred, real)
nS = table(df$S)
nconjunta["POSITIVA","POSITIVA"]/nS["POSITIVA"]
source("~/GitHub/Estad-stica-pr-cticas/Practica 2.R")
install.packages("e1071")
install.packages("e1071")
datos <- read.csv('datosB2.csv', sep= ";", dec= ",")
datos <- datos[!is.na(datos$TOTAL_SALA),]
datos
#Crea nuevas variables categóricas
datos["VP"] = ifelse(datos$PUNTUACION>2500, "POSITIVA", "NEGATIVA")
datos["SA"] = ifelse(datos$SALA=="A", "POSITIVA", "NEGATIVA")
datos["VH1"] = ifelse(datos$HABITACION1<13, "POSITIVA", "NEGATIVA")
datos["VT"] = ifelse(datos$TOTAL_SALA<50,"POSITIVA", "NEGATIVA")
datos["VMB"] = ifelse(datos$MIEMBROS>5 & datos$MIEMBROS<3, "NEGATIVA", "POSITIVA")
datos["VNP"] = ifelse(datos$PISTAS<3, "POSITIVA", "NEGATIVA")
datos["LE"] = ifelse(datos$LIDERAZGO=="SI", "POSITIVA", "NEGATIVA")
datos["PE"] = ifelse(datos$PRUEBA_EXTRA=="SI", "`POSITIVA", "NEGATIVA" )
library(e1071)
df = datos[,c("VH1","VMB","VP")]
df
#Variable final
Y = df[,"VP"]
#Variable que se utiliza para predecir
X = df[,c("VH1","VMB")]
m = naiveBayes(X,Y)
pred = predict(m, df[,c("VH1","VMB")])
real=df$VP
nconjunta = table(pred, real)
nS = table(df$S)
nconjunta["POSITIVA","POSITIVA"]/nS["POSITIVA"]
install.packages("e1071")
install.packages("e1071")
datos <- read.csv('datosB2.csv', sep= ";", dec= ",")
datos <- datos[!is.na(datos$TOTAL_SALA),]
datos
#Crea nuevas variables categóricas
datos["VP"] = ifelse(datos$PUNTUACION>2500, "POSITIVA", "NEGATIVA")
datos["SA"] = ifelse(datos$SALA=="A", "POSITIVA", "NEGATIVA")
datos["VH1"] = ifelse(datos$HABITACION1<13, "POSITIVA", "NEGATIVA")
datos["VT"] = ifelse(datos$TOTAL_SALA<50,"POSITIVA", "NEGATIVA")
datos["VMB"] = ifelse(datos$MIEMBROS>5 & datos$MIEMBROS<3, "NEGATIVA", "POSITIVA")
datos["VNP"] = ifelse(datos$PISTAS<3, "POSITIVA", "NEGATIVA")
datos["LE"] = ifelse(datos$LIDERAZGO=="SI", "POSITIVA", "NEGATIVA")
datos["PE"] = ifelse(datos$PRUEBA_EXTRA=="SI", "`POSITIVA", "NEGATIVA" )
library(e1071)
df = datos[,c("VH1","VMB","VP")]
df
#Variable final
Y = df[,"VP"]
#Variable que se utiliza para predecir
X = df[,c("VH1","VMB")]
m = naiveBayes(X,Y)
pred = predict(m, df[,c("VH1","VMB")])
real=df$VP
nconjunta = table(pred, real)
nS = table(df$S)
nconjunta["POSITIVA","POSITIVA"]/nS["POSITIVA"]
nS
pred = predict(m, df[,c("VH1","VMB")])
real=df$VP
nconjunta = table(pred, real)
nS = table(df$VP)
nconjunta["POSITIVA","POSITIVA"]/nS["POSITIVA"]
nconjunta
nconjunta["NEGATIVA","NEGATIVA"]/nS["NEGATIVA"]
nconjunta = table(real, pred)
nS = table(df$VP)
nconjunta["POSITIVA","POSITIVA"]/nS["POSITIVA"]
nconjunta["NEGATIVA","NEGATIVA"]/nS["NEGATIVA"]
nconjunta
n= nconjunta["NEGATIVA", "NEGATIVA"] + nconjunta["NEGATIVA", "POSITIVA"]
nconjunta["NEGATIVA","NEGATIVA"]/n
pred = predict(m, df[,c("VH1","VMB")])
real=df$VP
nconjunta = table(pred, real)
nVP = table(df$VP)
nconjunta
nconjunta
n
n= nconjunta["NEGATIVA", "NEGATIVA"] + nconjunta["POSITIVA", "NEGATIVA"]
n
nconjunta["POSITIVA", "NEGATIVA"]
nconjunta["NEGATIVA", "POSITIVA"]
n= nconjunta["NEGATIVA", "NEGATIVA"] + nconjunta["NEGATIVA", "POSITIVA"]
nconjunta["NEGATIVA","NEGATIVA"]/n
source("~/GitHub/Estad-stica-pr-cticas/Practica 2.R")
install.packages("e1071")
datos <- read.csv('datosB2.csv', sep= ";", dec= ",")
datos <- datos[!is.na(datos$TOTAL_SALA),]
datos
#Crea nuevas variables categóricas
datos["VP"] = ifelse(datos$PUNTUACION>2500, "POSITIVA", "NEGATIVA")
datos["SA"] = ifelse(datos$SALA=="A", "POSITIVA", "NEGATIVA")
datos["VH1"] = ifelse(datos$HABITACION1<13, "POSITIVA", "NEGATIVA")
datos["VT"] = ifelse(datos$TOTAL_SALA<50,"POSITIVA", "NEGATIVA")
datos["VMB"] = ifelse(datos$MIEMBROS>5 & datos$MIEMBROS<3, "NEGATIVA", "POSITIVA")
datos["VNP"] = ifelse(datos$PISTAS<3, "POSITIVA", "NEGATIVA")
datos["LE"] = ifelse(datos$LIDERAZGO=="SI", "POSITIVA", "NEGATIVA")
datos["PE"] = ifelse(datos$PRUEBA_EXTRA=="SI", "`POSITIVA", "NEGATIVA" )
library(e1071)
# Seleciona las variabels categóricas para el modelo
df = datos[,c("VH1","VMB","VP")]
df
#Variable final
Y = df[,"VP"]
#Variable que se utiliza para predecir
X = df[,c("VH1","VMB")]
m = naiveBayes(X,Y)
# Extrae predicciones para evaluar el clasificador
pred = predict(m, df[,c("VH1","VMB")])
# Evaluar capacidad de prediccion del modelo
real=df$VP
nconjunta = table(pred, real)
nVP = table(df$VP)
#Probabilidad de que acierte en la predcción de valoración positiva dado que el grupo ha tenido una valoración positiva.
nconjunta["POSITIVA","POSITIVA"]/nVP["POSITIVA"]
#Probabilidad de que acierte en la predcción de valoración positiva dado que el grupo ha tenido una valoración positiva.
nconjunta["NEGATIVA","NEGATIVA"]/nVP["NEGATIVA"]
nconjunta
source("~/GitHub/Estad-stica-pr-cticas/Practica 2.R")
install.packages("e1071")
install.packages("e1071")
datos <- read.csv('datosB2.csv', sep= ";", dec= ",")
datos <- datos[!is.na(datos$TOTAL_SALA),]
datos
#Crea nuevas variables categóricas
datos["VP"] = ifelse(datos$PUNTUACION>2500, "POSITIVA", "NEGATIVA")
datos["SA"] = ifelse(datos$SALA=="A", "POSITIVA", "NEGATIVA")
datos["VH1"] = ifelse(datos$HABITACION1<13, "POSITIVA", "NEGATIVA")
datos["VT"] = ifelse(datos$TOTAL_SALA<50,"POSITIVA", "NEGATIVA")
datos["VMB"] = ifelse(datos$MIEMBROS>5 & datos$MIEMBROS<3, "NEGATIVA", "POSITIVA")
datos["VNP"] = ifelse(datos$PISTAS<3, "POSITIVA", "NEGATIVA")
datos["LE"] = ifelse(datos$LIDERAZGO=="SI", "POSITIVA", "NEGATIVA")
datos["PE"] = ifelse(datos$PRUEBA_EXTRA=="SI", "`POSITIVA", "NEGATIVA" )
library(e1071)
# Seleciona las variables categóricas para el modelo
df = datos[,c("SA","VMB","VH1")]
df
#Variable final
Y = df[,"VP"]
df
Y = df[,"SA"]
#Variable que se utiliza para predecir
X = df[,c("VH1","VMB")]
m = naiveBayes(X,Y)
# Extrae predicciones para evaluar el clasificador
pred = predict(m, df[,c("VH1","VMB")])
# Evaluar capacidad de prediccion del modelo
real=df$SA
nconjunta = table(pred, real)
nSA = table(df$SA)
#Probabilidad de que acierte en la predcción de valoración positiva dado que el grupo ha tenido una valoración positiva.
nconjunta["POSITIVA","POSITIVA"]/nSA["POSITIVA"]
#Probabilidad de que acierte en la predcción de valoración positiva dado que el grupo ha tenido una valoración positiva.
nconjunta["NEGATIVA","NEGATIVA"]/nSA["NEGATIVA"]
#Probabilidad de que el grupo obtenga una valoración positiva dado que el clasificador predice que va a ser negativa.
n= nconjunta["NEGATIVA", "NEGATIVA"] + nconjunta["NEGATIVA", "POSITIVA"]
nconjunta["NEGATIVA","POSITIVA"]/n
#Probabilidad de que el grupo obtenga una valoración positiva dado que el clasificador predice que va a ser positiva.
n= nconjunta["POSITIVA", "POSITIVA"] + nconjunta["POSITIVA", "NEGATIVA"]
nconjunta["POSITIVA","POSITIVA"]/n
#Utilizando información de sala, número de miembros, habitación 1, y tiempo total.
df1 = datos[,c("SA","VMB","VH1","VT")]
df1
Y1 = df[,"SA"]
X1 = df[,c("VH1","VMB","VT")]
m1 = naiveBayes(X1,Y1)
X1 = df[,c("VH1","VMB","VT")]
df1 = datos[,c("SA","VMB","VH1","VT")]
df1
df1 = datos[,c("SA","VMB","VH1","VT")]
df1
Y1 = df1[,"SA"]
X1 = df1[,c("VH1","VMB","VT")]
m1 = naiveBayes(X1,Y1)
pred1 = predict(m1, df1[,c("VH1","VMB","VT")])
real1=df1$SA
nconjunta1 = table(pred1, real1)
nSA1 = table(df1$SA)
#Probabilidad de que acierte en la predcción de valoración positiva dado que el grupo ha tenido una valoración positiva.
nconjunta1["POSITIVA","POSITIVA"]/nSA1["POSITIVA"]
#Probabilidad de que acierte en la predcción de valoración positiva dado que el grupo ha tenido una valoración positiva.
nconjunta1["NEGATIVA","NEGATIVA"]/nSA1["NEGATIVA"]
#Probabilidad de que el grupo obtenga una valoración positiva dado que el clasificador predice que va a ser negativa.
n1= nconjunta1["NEGATIVA", "NEGATIVA"] + nconjunta1["NEGATIVA", "POSITIVA"]
nconjunta1["NEGATIVA","POSITIVA"]/n1
#Probabilidad de que el grupo obtenga una valoración positiva dado que el clasificador predice que va a ser positiva.
n1_2= nconjunta1["POSITIVA", "POSITIVA"] + nconjunta1["POSITIVA", "NEGATIVA"]
nconjunta1["POSITIVA","POSITIVA"]/n1_2
df2 = datos[,c("SA","VMB","VH1","VT","VNP","LE")]
df2
Y2 = df2[,"SA"]
X2 = df2[,c("VH1","VMB","VT","VNP","LE")]
m2 = naiveBayes(X2,Y2)
pred2 = predict(m2, df2[,c("VH1","VMB","VT","VNP","LE")])
real2=df2$SA
nconjunta2 = table(pred2, real2)
nSA2 = table(df2$SA)
#a)Probabilidad de que acierte en la predcción de valoración positiva dado que el grupo ha tenido una valoración positiva.
nconjunta2["POSITIVA","POSITIVA"]/nSA2["POSITIVA"]
#b)Probabilidad de que acierte en la predcción de valoración positiva dado que el grupo ha tenido una valoración positiva.
nconjunta2["NEGATIVA","NEGATIVA"]/nSA2["NEGATIVA"]
#d)Probabilidad de que el grupo obtenga una valoración positiva dado que el clasificador predice que va a ser negativa.
n2= nconjunta2["NEGATIVA", "NEGATIVA"] + nconjunta2["NEGATIVA", "POSITIVA"]
nconjunta2["NEGATIVA","POSITIVA"]/n2
#c)Probabilidad de que el grupo obtenga una valoración positiva dado que el clasificador predice que va a ser positiva.
n2_2= nconjunta2["POSITIVA", "POSITIVA"] + nconjunta2["POSITIVA", "NEGATIVA"]
nconjunta2["POSITIVA","POSITIVA"]/n2_2
df_a = datos[,c("SA")]
df_a
Y_a= df_a[,"SA"]
Y_a = df_a[,"SA"]
df_a = datos[,("SA")]
df_a
Y_a = df_a[,"SA"]
Y_a = df_a
m_a = naiveBayes(Y_a)
m_a = naiveBayes(X_a,Y_a)
Y_a = df_a
X_a =df_a[,]
X_a
Y_a = df_a
X_a = df_a
m_a = naiveBayes(X_a,Y_a)
df_a = datos[,("SA")]
df_a
Y_a = df_a
X_a = df_a
m_a = naiveBayes(X_a,Y_a)
m2 = naiveBayes(X2,Y2)
pred_a = predict(m_a, df_a)
real_a=df_a$SA
df_a = datos[,("SA")]
df_a
Y_a = df_a
X_a = df_a
m_a = naiveBayes(X_a,Y_a)
m2 = naiveBayes(X2,Y2)
pred_a = predict(m_a, df_a)
real_a=df_a$SA
df_a = datos[,("SA")]
df_a
Y_a = df_a
X_a = df_a
m_a = naiveBayes(X_a,Y_a)
m2 = naiveBayes(X2,Y2)
pred_a = predict(m_a, df_a)
real_a=df_a
nconjunta_a = table(pred_a, real_a)
nSA_a = table(df_a)
#Utilizando solo información de sala.
df_a = datos[,("SA")]
df_a
Y_a = df_a
X_a = df_a
m_a = naiveBayes(X_a,Y_a)
m2 = naiveBayes(X2,Y2)
pred_a = predict(m_a, df_a)
real_a=df_a
nconjunta_a = table(pred_a, real_a)
nSA_a = table(df_a)
#a)Probabilidad de que acierte en la predcción de valoración positiva dado que el grupo ha tenido una valoración positiva.
nconjunta_a["POSITIVA","POSITIVA"]/nSA_a["POSITIVA"]
#b)Probabilidad de que acierte en la predcción de valoración positiva dado que el grupo ha tenido una valoración positiva.
nconjunta_a["NEGATIVA","NEGATIVA"]/nSA_a["NEGATIVA"]
#d)Probabilidad de que el grupo obtenga una valoración positiva dado que el clasificador predice que va a ser negativa.
n_a= nconjunta_a["NEGATIVA", "NEGATIVA"] + nconjunta_a["NEGATIVA", "POSITIVA"]
nconjunta_a["NEGATIVA","POSITIVA"]/n_a
#c)Probabilidad de que el grupo obtenga una valoración positiva dado que el clasificador predice que va a ser positiva.
n_a2= nconjunta_a["POSITIVA", "POSITIVA"] + nconjunta_a["POSITIVA", "NEGATIVA"]
nconjunta_a["POSITIVA","POSITIVA"]/n_a2
source("~/GitHub/Estad-stica-pr-cticas/Practica 2.R")
install.packages("e1071")
